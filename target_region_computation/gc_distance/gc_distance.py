# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gc_distance', [dirname(__file__)])
        except ImportError:
            import _gc_distance
            return _gc_distance
        if fp is not None:
            try:
                _mod = imp.load_module('_gc_distance', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gc_distance = swig_import_helper()
    del swig_import_helper
else:
    import _gc_distance
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


RADIUS = _gc_distance.RADIUS

def dist_cosine(*args) -> "double" :
  return _gc_distance.dist_cosine(*args)
dist_cosine = _gc_distance.dist_cosine

def bearing(*args) -> "double" :
  return _gc_distance.bearing(*args)
bearing = _gc_distance.bearing

def dist_haversine(*args) -> "double" :
  return _gc_distance.dist_haversine(*args)
dist_haversine = _gc_distance.dist_haversine

def dest_point(*args) -> "void" :
  return _gc_distance.dest_point(*args)
dest_point = _gc_distance.dest_point

def gc_intersect(*args) -> "int" :
  return _gc_distance.gc_intersect(*args)
gc_intersect = _gc_distance.gc_intersect

def dist_to_gc(*args) -> "double" :
  return _gc_distance.dist_to_gc(*args)
dist_to_gc = _gc_distance.dist_to_gc

def along_track_distance(*args) -> "double" :
  return _gc_distance.along_track_distance(*args)
along_track_distance = _gc_distance.along_track_distance

def symmetric_point(*args) -> "void" :
  return _gc_distance.symmetric_point(*args)
symmetric_point = _gc_distance.symmetric_point

def min_sum_dist_to_line(*args) -> "double" :
  return _gc_distance.min_sum_dist_to_line(*args)
min_sum_dist_to_line = _gc_distance.min_sum_dist_to_line

def dist_to_line(*args) -> "double" :
  return _gc_distance.dist_to_line(*args)
dist_to_line = _gc_distance.dist_to_line

def dist_to_mpolygon(*args) -> "double" :
  return _gc_distance.dist_to_mpolygon(*args)
dist_to_mpolygon = _gc_distance.dist_to_mpolygon

def gen_desirable_region_by_grid(*args) -> "std::string" :
  return _gc_distance.gen_desirable_region_by_grid(*args)
gen_desirable_region_by_grid = _gc_distance.gen_desirable_region_by_grid

def dist_to_mpolygon_nb(*args) -> "double" :
  return _gc_distance.dist_to_mpolygon_nb(*args)
dist_to_mpolygon_nb = _gc_distance.dist_to_mpolygon_nb
# This file is compatible with both classic and new-style classes.

cvar = _gc_distance.cvar
PI = cvar.PI

